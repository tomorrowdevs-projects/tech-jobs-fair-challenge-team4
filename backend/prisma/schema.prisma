// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Contact {
  id          Int      @id @default(autoincrement())
  firstName   String
  lastName    String
  title       String? // Posizione o ruolo nella compagnia, opzionale per contatti esterni
  phoneNumber String   @unique
  email       String   @unique
  telegram    String?  @unique
  linkedin    String?  @unique
  department  String? // Opzionale, per contatti interni
  company     String  // Nome dell'azienda, "TechSolutions Inc." per interni o il nome dell'azienda esterna
  vatNumber   String? // Partita IVA, opzionale
  location    String? // Ubicazione fisica o sede, opzionale
  isExternal  Boolean // Flag per distinguere tra contatti interni ed esterni
  notes       String? // Campo per note aggiuntive, come informazioni sulle modalit√† di comunicazione preferite
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roles       ContactRole[]
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  roleId    Int?
  role      Role?      @relation(fields: [roleId], references: [id])
}

model Role {
  id                  Int        @id @default(autoincrement())
  name                String     @unique
  roleManagement      Boolean    @default(false)
  userManagement      Boolean    @default(false)
  contactManagement   Boolean    @default(false)
  deleting            Boolean
  writing             Boolean
  editing             Boolean
  reading             Boolean
  contacts            ContactRole[]
  users               User[]
}

model ContactRole {
  contactId Int
  roleId    Int
  contact   Contact   @relation(fields: [contactId], references: [id])
  role      Role      @relation(fields: [roleId], references: [id])

  @@id([contactId, roleId])
}
